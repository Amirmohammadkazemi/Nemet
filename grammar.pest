program_file = _{SOI ~ (main_block)* ~ EOI}

main_block = {block_start_tag ~ (stmt)* ~ block_end_tag}
block_start_tag = {"@" ~ "[" ~ ident ~ "]"}
block_end_tag = {"!@" ~ "[" ~ ident ~ "]"}
stmt = _{assignment_expression | option}

option = {"<" ~ ident ~ "=" ~ (string | number | tuple) ~ ">"}

indexing_expression = {ident ~ "[" ~ ("*" | indexer ~ ("," ~ indexer)*) ~ "]"}
indexer = _{range | integer}
range = {integer ~ ".." ~ integer}
assignable_expression = _{indexing_expression | ident}
assignment_expression = { assignable_expression ~ assignment_op ~ expr ~ ";" }
assignment_op = {"="|"+="|"-="|"/="|"%="|"&="|"|="|"^="}

debug_print = {"#" ~ expr ~ ";"}

expr = {atom ~ (bin_op ~ atom)*}
unary_op = {sub | add}
atom = _{ unary_op? ~ primary }
bin_op = _{ add | sub | multi | divide | mod }
primary = { calculative_values | "(" ~ expr ~ ")" }
calculative_values = _{(ident | number | indexing_expression)}

number = _{integer | hash}
integer = @{ ASCII_DIGIT+ }
hash = @{ "#" ~ integer }
tuple = {"(" ~ number ~ ("," ~ number )+ ~ ")"}
string = {"\"" ~ (!"\"" ~ !NEWLINE ~ ANY)* ~ "\""}

ident = @{ ( ASCII_ALPHA | "_") ~ ( ASCII_ALPHANUMERIC | "_" )*}

add = {"+"}
sub = {"-"}
multi = {"*"}
divide = {"/"}
mod = {"%"}

WHITESPACE = _{ " " | NEWLINE}
COMMENT = _{ "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }
