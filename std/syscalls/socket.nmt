import "./std/syscalls/proc" :: syscall_exit

func syscall_socket(domain @int, type @int, protocol @int) @int {
    ~ socket file descriptor
    var sfd @int = 0;
    asm {
        "mov rax, 0x29"
        "mov edi, %domain"
        "mov esi, %type"
        "mov edx, %protocol"
        "syscall"
        "mov %sfd, eax"
    }
    if sfd < 0 {
        print "Error: opening up a socket connection\n";
        syscall_exit(-1);
    } else {
        return sfd;
    }
}

func syscall_bind(socket_fd @int, sockaddr @ptr, size @long) {
    var res @int = 0;
    asm {
        "mov rax, 0x31"
        "mov edi, %socket_fd"
        "mov rsi, %sockaddr"
        "mov rdx, %size"
        "syscall"
        "mov %res ,eax"
    }
    if res == -13 { print "Error: The address is protected, and the user is not the superuser\n"; }
    if res == -98 { print "Error: The given address is already in use.\n"; }
    if res == -9  { print "Error: sockfd is not a valid file descriptor.\n"; }
    if res == -22 { print "Error: addrlen is wrong, or addr is not a valid address for this socket's domain.\n"; }
    if res == -88 { print "Error: The file descriptor sockfd does not refer to a socket.\n"; }
    if res == -99 { print "Error: A nonexistent interface was requested or the requested address was not local.\n"; }
    if res == -14 { print "Error: addr points outside the user's accessible address space.\n"; }
    if res == -40 { print "Error: Too many symbolic links were encountered in resolving addr.\n"; }
    if res == -36 { print "Error: addr is too long.\n"; }
    if res == -2  { print "Error: A component in the directory prefix of the socket pathname does not exist.\n"; }
    if res == -12 { print "Error: Insufficient kernel memory was available.\n"; }
    if res == -20 { print "Error: A component of the path prefix is not a directory.\n"; }
    if res == -30 { print "Error: The socket inode would reside on a read-only filesystem.\n"; }
    if res < 0 {
        print "Error: Binding Failed\n";
        syscall_exit(-1);
    }
}

func syscall_listen(socket_fd @int, backlog @int) {
    var res @int = 0;
    asm {
        "mov rax, 0x32"
        "mov edi, %socket_fd"
        "mov esi, %backlog"
        "syscall"
        "mov %res, eax"
    }
    if res < 0 {
        print "Error: Listen Failed!\n";
        syscall_exit(-1);
    }
}

func syscall_accept(socket_fd @int, addr @ptr, addrlen @ptr) @int {
    var res @int = 0;
    asm {
        "mov rax, 43"
        "mov edi, %socket_fd"
        "mov rsi, %addr"
        "mov rdx, %addrlen"
        "syscall"
        "mov %res, eax"
    }
    if res == -9 {
        print "Warning: sockfd is not an open file descriptor\n";
    }
    if res == -22 {
        print "Socket is not listening for connections, or addrlen is invalid\n";
    }
    return res;
}
