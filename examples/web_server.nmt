import "./std/syscalls/file" :: syscall_write, syscall_close
import "./std/syscalls/proc" :: syscall_exit
import "./std/syscalls/socket" :: syscall_socket, syscall_bind,
        syscall_listen, syscall_accept

func main() {
    var sfd = syscall_socket(2,1,0);
    var server_addr @[char,16];
    ~ AF_INET = 2 in u16
    server_addr[0] = 2;
    server_addr[1] = 0;
    ~ port 6969
    server_addr[2] = 0x1b;
    server_addr[3] = 0x39;
    server_addr[15] = 0;
    syscall_bind(sfd, &server_addr, 16);
    syscall_listen(sfd, 10);
    var addr @[char,16];
    var addr_sz @[int,1];
    addr_sz[0] = 16;
    while true {
        var client_fd = syscall_accept(sfd, &addr, &addr_sz);
        if client_fd <= 0 {
            print "Error: cannot accept user request!\n";
            syscall_exit(-1);
        } else {
            print "Client Connected!\n";
            syscall_write(client_fd, "HTTP/1.1 200 OK\r\n",17);
            syscall_write(client_fd, "Server: Powerd by Nmet\r\n",24);
            syscall_write(client_fd, "Content-Type: text/html\r\n",25);
            syscall_write(client_fd, "Content-Length: 30\r\n");
            syscall_write(client_fd, "\r\n",2);
            syscall_write(client_fd, "<h1>Hello World Form Nmet</h1>",30);

            syscall_close(client_fd);
        }
    }
    syscall_close(sfd);
}
