use std::fmt::Display;

#[allow(dead_code)]
pub enum Mnemonic {
    Lea,
    Mov,
    Cmove,
    Cmovne,
    Cmovg,
    Cmovl,
    Cmovge,
    Cmovle,
    Push,
    Pop,
    Add,
    Sub,
    Imul,
    Idiv,
    Mul,
    Or,
    And,
    Sal,
    Sar,
    Shr,
    Cmp,
    Test,
    Cqo,
    Neg,
    Not,
    Call,
    Jmp,
    Jz,
    Jnz,
    Jne,
    Syscall,
    Leave,
    Ret,
}

impl Display for Mnemonic {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Lea => write!(f, "lea"),
            Self::Mov => write!(f, "mov"),
            Self::Cmove => write!(f, "cmove"),
            Self::Cmovne => write!(f, "cmovne"),
            Self::Cmovg => write!(f, "cmovg"),
            Self::Cmovl => write!(f, "cmovl"),
            Self::Cmovge => write!(f, "cmovge"),
            Self::Cmovle => write!(f, "cmovle"),
            Self::Push => write!(f, "push"),
            Self::Pop => write!(f, "pop"),
            Self::Add => write!(f, "add"),
            Self::Sub => write!(f, "sub"),
            Self::Imul => write!(f, "imul"),
            Self::Idiv => write!(f, "idiv"),
            Self::Mul => write!(f, "mul"),
            Self::Or => write!(f, "or"),
            Self::And => write!(f, "and"),
            Self::Sal => write!(f, "sal"),
            Self::Sar => write!(f, "sar"),
            Self::Shr => write!(f, "shr"),
            Self::Cmp => write!(f, "cmp"),
            Self::Test => write!(f, "test"),
            Self::Cqo => write!(f, "cqo"),
            Self::Neg => write!(f, "neg"),
            Self::Not => write!(f, "not"),
            Self::Jmp => write!(f, "jmp"),
            Self::Jz => write!(f, "jz"),
            Self::Jnz => write!(f, "jnz"),
            Self::Jne => write!(f, "jne"),
            Self::Syscall => write!(f, "syscall"),
            Self::Call => write!(f, "call"),
            Self::Leave => write!(f, "leave"),
            Self::Ret => write!(f, "ret"),
        }
    }
}

